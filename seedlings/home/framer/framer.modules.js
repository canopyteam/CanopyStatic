require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"CCOAppBar":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

this.CCOAppBar = (function(superClass) {
  extend(CCOAppBar, superClass);

  function CCOAppBar(options) {
    var constants, statusBarImage;
    if (options == null) {
      options = {};
    }
    CCOAppBar.__super__.constructor.call(this, options);
    constants = {
      nav_bar_height: 98,
      product_cell_height: 720,
      app_bar_height: 128
    };
    if (options.statusBarTextColor === "black") {
      statusBarImage = 'images/CCOAppBar/StatusBar-Black.png';
    } else {
      statusBarImage = 'images/CCOAppBar/StatusBar-White.png';
    }
    this.width = Framer.Device.screen.width;
    this.height = constants.app_bar_height;
    this.backgroundColor = options.backgroundColor;
    this.statusBar = new Layer({
      width: this.width,
      height: 44,
      backgroundColor: options.statusBarColor || "transparent",
      superLayer: this
    });
    this.statusBarImage = new Layer({
      width: this.width,
      height: this.statusBar.height,
      image: statusBarImage,
      superLayer: this.statusBar
    });
    this.appBarContainer = new Layer({
      backgroundColor: null,
      y: this.statusBar.height,
      width: this.statusBar.width,
      height: this.height - this.statusBar.height,
      superLayer: this
    });
    this.viewName = new Layer({
      width: this.width,
      height: 140,
      backgroundColor: null,
      superLayer: this.appBarContainer
    });
    this.viewName.html = options.viewName || 'Name this';
    this.viewName.style.fontFamily = options.fontFamily || 'Helvetica Neue';
    this.viewName.style = {
      'font-size': '40px',
      'color': 'white',
      'text-align': 'center',
      'padding-top': '20px'
    };
  }

  return CCOAppBar;

})(Layer);

exports.CCOAppBar;



},{}],"CCOScrollView":[function(require,module,exports){
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Math.clamp = function(n, min, max) {
  return Math.max(min, Math.min(max, n));
};

this.CCODraggableScrollView = (function(superClass) {
  extend(CCODraggableScrollView, superClass);

  function CCODraggableScrollView(options) {
    this.dragEnd = bind(this.dragEnd, this);
    this.dragMove = bind(this.dragMove, this);
    this.dragStart = bind(this.dragStart, this);
    CCODraggableScrollView.__super__.constructor.call(this, options);
    this.contentWidth = options.contentWidth || Framer.Device.screen.width;
    this.contentHeight = options.contentHeight || Framer.Device.screen.height;
    this._direction = {};
    this._vertical = options.vertical || false;
    this._horizontal = options.horizontal || false;
    this.xMax = 0;
    this.xMin = -(this.contentWidth - this.width);
    this.yMax = 0;
    this.yMin = -(this.contentHeight - this.height);
    this.backgroundColor = "transparent";
    this.content = new Layer({
      superLayer: this,
      backgroundColor: null,
      width: this.contentWidth,
      height: this.contentHeight
    });
    this.content.draggable.Enabled = true;
    this.content.on(Events.DragStart, this.dragStart);
    this.content.on(Events.DragMove, this.dragMove);
    this.content.on(Events.DragEnd, this.dragEnd);
  }

  CCODraggableScrollView.prototype.dragStart = function(e, layer) {
    var ref;
    this.animateStop();
    if ((ref = this.momentum) != null) {
      ref.stop();
    }
    return this.emit(Events.DragStart, e, layer);
  };

  CCODraggableScrollView.prototype.dragMove = function(e, layer) {
    if (this._horizontal) {
      if (layer.x > 0) {
        this.content.draggable.speedX = Math.clamp(Utils.mapRange(layer.x, 100, 0, 0.5, 1), 0.5, 1);
      } else if (layer.x < this.xMin) {
        this.content.draggable.speedX = Math.clamp(Utils.mapRange(layer.x, this.xMin - 100, this.xMin, 0.5, 1), 0.5, 1);
      } else {
        this.content.draggable.speedX = 1;
      }
    } else {
      this.content.draggable.speedX = 0;
    }
    if (this._vertical) {
      if (layer.y > 0) {
        return this.content.draggable.speedY = Math.clamp(Utils.mapRange(layer.y, 100, this.yMax, 0.5, 1), 0.5, 1);
      } else if (layer.y < this.yMin) {
        return this.content.draggable.speedY = Math.clamp(Utils.mapRange(layer.y, this.yMin - 100, this.yMin, 0.5, 1), 0.5, 1);
      } else {
        return this.content.draggable.speedY = 1;
      }
    } else {
      return this.content.draggable.speedY = 0;
    }
  };

  CCODraggableScrollView.prototype.dragEnd = function(e, layer) {
    var totalVelocity, velocity, x, y;
    console.log('super dragEnd');
    velocity = layer.draggable.calculateVelocity();
    if (Math.abs(velocity.x) < .1 && Math.abs(velocity.y) < .1) {
      x = Math.clamp(layer.x, this.xMin, 0);
      y = Math.clamp(layer.y, this.yMin, 0);
      if (x !== layer.x || y !== layer.y) {
        this.momentum = layer.animate({
          properties: {
            x: x,
            y: y
          },
          curve: "spring",
          curveOptions: {
            friction: 100
          },
          time: .15
        });
        return this.momentum.on(Events.AnimationEnd, (function(_this) {
          return function() {
            return _this.emit(Events.DragEnd, e, layer);
          };
        })(this));
      } else {
        return this.emit(Events.DragEnd, e, layer);
      }
    } else {
      totalVelocity = Utils.pointTotal(Utils.pointAbs(velocity));
      this.momentum = this.content.animate({
        properties: {
          x: Math.clamp(parseInt(layer.x + (velocity.x * 500)), this.xMin, 0),
          y: Math.clamp(parseInt(layer.y + (velocity.y * 200)), this.yMin, 0)
        },
        curve: "spring",
        curveOptions: {
          friction: 100
        }
      });
      return this.momentum.on(Events.AnimationEnd, (function(_this) {
        return function() {
          return _this.emit(Events.DragEnd, e, layer);
        };
      })(this));
    }
  };

  return CCODraggableScrollView;

})(Layer);

exports.CCODraggableScrollView;



},{}],"CCOStylesheet":[function(require,module,exports){
this.CCOStylesheet = (function() {
  function CCOStylesheet(url) {
    var l, wf;
    wf = document.createElement('link');
    wf.href = url;
    wf.rel = 'stylesheet';
    l = document.getElementsByTagName('link')[0];
    l.parentNode.insertBefore(wf, l);
  }

  return CCOStylesheet;

})();

exports.CCOStylesheet;



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYnJpYW5hcm1zdHJvbmcvR2l0aHViL0Nhbm9weVByb3RvdHlwZXMvQ2Fub3B5SG9tZS5mcmFtZXIvbW9kdWxlcy9DQ09BcHBCYXIuY29mZmVlIiwiL1VzZXJzL2JyaWFuYXJtc3Ryb25nL0dpdGh1Yi9DYW5vcHlQcm90b3R5cGVzL0Nhbm9weUhvbWUuZnJhbWVyL21vZHVsZXMvQ0NPU2Nyb2xsVmlldy5jb2ZmZWUiLCIvVXNlcnMvYnJpYW5hcm1zdHJvbmcvR2l0aHViL0Nhbm9weVByb3RvdHlwZXMvQ2Fub3B5SG9tZS5mcmFtZXIvbW9kdWxlcy9DQ09TdHlsZXNoZWV0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ01BLElBQUE7NkJBQUE7O0FBQUEsSUFBTyxDQUFBO0FBQ04sK0JBQUEsQ0FBQTs7QUFBYSxFQUFBLG1CQUFDLE9BQUQsR0FBQTtBQUNaLFFBQUEseUJBQUE7O01BRGEsVUFBVTtLQUN2QjtBQUFBLElBQUEsMkNBQU0sT0FBTixDQUFBLENBQUE7QUFBQSxJQUVBLFNBQUEsR0FDQztBQUFBLE1BQUEsY0FBQSxFQUFnQixFQUFoQjtBQUFBLE1BQ0EsbUJBQUEsRUFBcUIsR0FEckI7QUFBQSxNQUVBLGNBQUEsRUFBZ0IsR0FGaEI7S0FIRCxDQUFBO0FBT0EsSUFBQSxJQUFHLE9BQU8sQ0FBQyxrQkFBUixLQUE4QixPQUFqQztBQUNDLE1BQUEsY0FBQSxHQUFpQixzQ0FBakIsQ0FERDtLQUFBLE1BQUE7QUFHQyxNQUFBLGNBQUEsR0FBaUIsc0NBQWpCLENBSEQ7S0FQQTtBQUFBLElBWUEsSUFBQyxDQUFBLEtBQUQsR0FBUyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQVo5QixDQUFBO0FBQUEsSUFhQSxJQUFDLENBQUEsTUFBRCxHQUFVLFNBQVMsQ0FBQyxjQWJwQixDQUFBO0FBQUEs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QUEsQ0FBQSxJQUFBLENBQWxDLEVBekJGO0tBSE87RUFBQSxDQXJEVCxDQUFBOztnQ0FBQTs7R0FQb0MsTUFIdEMsQ0FBQTs7QUFBQSxPQThGTyxDQUFDLHNCQTlGUixDQUFBOzs7OztBQ0FBLElBQU8sQ0FBQTtBQUNPLEVBQUEsdUJBQUMsR0FBRCxHQUFBO0FBQ1osUUFBQSxLQUFBO0FBQUEsSUFBQSxFQUFBLEdBQUssUUFBUSxDQUFDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBTCxDQUFBO0FBQUEsSUFDQSxFQUFFLENBQUMsSUFBSCxHQUFVLEdBRFYsQ0FBQTtBQUFBLElBRUEsRUFBRSxDQUFDLEdBQUgsR0FBUyxZQUZULENBQUE7QUFBQSxJQUdBLENBQUEsR0FBSSxRQUFRLENBQUMsb0JBQVQsQ0FBOEIsTUFBOUIsQ0FBc0MsQ0FBQSxDQUFBLENBSDFDLENBQUE7QUFBQSxJQUlBLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBYixDQUEwQixFQUExQixFQUE4QixDQUE5QixDQUpBLENBRFk7RUFBQSxDQUFiOzt1QkFBQTs7SUFERCxDQUFBOztBQUFBLE9BUU8sQ0FBQyxhQVJSLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyBBZGQgdGhlIGZvbG93aW5nIGxpbmUgdG8geW91ciBwcm9qZWN0IGluIEZyYW1lciBTdHVkaW8uXG4jIG1vZHVsZSA9IHJlcXVpcmUgXCJtb2R1bGVcIlxuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IG5hbWUsIGxpa2UgbW9kdWxlLm15RnVuYygpIG9yIG1vZHVsZS5teVZhclxuXG4jIENMQVNTOiBBcHBCYXJcbiMgQ3JlYXRlcyBhbiBpT1MgYXBwIGJhclxuY2xhc3MgQENDT0FwcEJhciBleHRlbmRzIExheWVyXG5cdGNvbnN0cnVjdG9yOiAob3B0aW9ucyA9IHt9KSAtPlxuXHRcdHN1cGVyIG9wdGlvbnNcblxuXHRcdGNvbnN0YW50cyA9XG5cdFx0XHRuYXZfYmFyX2hlaWdodDogOThcblx0XHRcdHByb2R1Y3RfY2VsbF9oZWlnaHQ6IDcyMFxuXHRcdFx0YXBwX2Jhcl9oZWlnaHQ6IDEyOFxuXG5cdFx0aWYgb3B0aW9ucy5zdGF0dXNCYXJUZXh0Q29sb3IgPT0gXCJibGFja1wiXG5cdFx0XHRzdGF0dXNCYXJJbWFnZSA9ICdpbWFnZXMvQ0NPQXBwQmFyL1N0YXR1c0Jhci1CbGFjay5wbmcnXG5cdFx0ZWxzZVxuXHRcdFx0c3RhdHVzQmFySW1hZ2UgPSAnaW1hZ2VzL0NDT0FwcEJhci9TdGF0dXNCYXItV2hpdGUucG5nJ1xuXG5cdFx0QHdpZHRoID0gRnJhbWVyLkRldmljZS5zY3JlZW4ud2lkdGhcblx0XHRAaGVpZ2h0ID0gY29uc3RhbnRzLmFwcF9iYXJfaGVpZ2h0XG5cdFx0QGJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yXG5cblx0XHRAc3RhdHVzQmFyID0gbmV3IExheWVyXG5cdFx0XHR3aWR0aDogQHdpZHRoXG5cdFx0XHRoZWlnaHQ6IDQ0XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuc3RhdHVzQmFyQ29sb3IgfHwgXCJ0cmFuc3BhcmVudFwiXG5cdFx0XHRzdXBlckxheWVyOiBAXG5cblx0XHRAc3RhdHVzQmFySW1hZ2UgPSBuZXcgTGF5ZXJcblx0XHRcdHdpZHRoOiBAd2lkdGhcblx0XHRcdGhlaWdodDogQHN0YXR1c0Jhci5oZWlnaHRcblx0XHRcdGltYWdlOiBzdGF0dXNCYXJJbWFnZVxuXHRcdFx0c3VwZXJMYXllcjogQHN0YXR1c0JhclxuXG5cdFx0QGFwcEJhckNvbnRhaW5lciA9IG5ldyBMYXllclxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBudWxsXG5cdFx0XHR5OiBAc3RhdHVzQmFyLmhlaWdodFxuXHRcdFx0d2lkdGg6IEBzdGF0dXNCYXIud2lkdGhcblx0XHRcdGhlaWdodDogQGhlaWdodCAtIEBzdGF0dXNCYXIuaGVpZ2h0XG5cdFx0XHRzdXBlckxheWVyOiBAXG5cblx0XHRAdmlld05hbWUgPSBuZXcgTGF5ZXJcblx0XHRcdHdpZHRoOiBAd2lkdGhcblx0XHRcdGhlaWdodDogMTQwXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG51bGxcblx0XHRcdHN1cGVyTGF5ZXI6IEBhcHBCYXJDb250YWluZXJcblx0XHRAdmlld05hbWUuaHRtbCA9IG9wdGlvbnMudmlld05hbWUgfHwgJ05hbWUgdGhpcydcblx0XHRAdmlld05hbWUuc3R5bGUuZm9udEZhbWlseSA9IG9wdGlvbnMuZm9udEZhbWlseSB8fCAnSGVsdmV0aWNhIE5ldWUnXG5cdFx0QHZpZXdOYW1lLnN0eWxlID0ge1xuXHRcdFx0J2ZvbnQtc2l6ZSc6JzQwcHgnLFxuXHRcdFx0J2NvbG9yJzogJ3doaXRlJ1xuXHRcdFx0J3RleHQtYWxpZ24nOiAnY2VudGVyJ1xuXHRcdFx0J3BhZGRpbmctdG9wJzogJzIwcHgnXG5cdFx0fVxuXG5leHBvcnRzLkNDT0FwcEJhclxuIiwiTWF0aC5jbGFtcCA9IChuLCBtaW4sIG1heCkgLT5cbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCBuKSlcblxuY2xhc3MgQENDT0RyYWdnYWJsZVNjcm9sbFZpZXcgZXh0ZW5kcyBMYXllclxuICAjIE9wdGlvbnMgYXJlOlxuICAjIC0gY29udGVudFdpZHRoOiB3aWR0aCBvZiBjb250ZW50XG4gICMgLSBjb250ZW50SGVpZ2h0OiBoZWlnaHQgb2YgY29udGVudFxuICAjIC0gdmVydGljYWw6IGJvb2xlYW5cbiAgIyAtIGhvcml6b250YWw6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMpIC0+XG4gICAgc3VwZXIob3B0aW9ucylcblxuICAgIEBjb250ZW50V2lkdGggPSBvcHRpb25zLmNvbnRlbnRXaWR0aCB8fCBGcmFtZXIuRGV2aWNlLnNjcmVlbi53aWR0aFxuICAgIEBjb250ZW50SGVpZ2h0ID0gb3B0aW9ucy5jb250ZW50SGVpZ2h0IHx8IEZyYW1lci5EZXZpY2Uuc2NyZWVuLmhlaWdodFxuXG4gICAgQF9kaXJlY3Rpb24gPSB7fVxuICAgIEBfdmVydGljYWwgPSBvcHRpb25zLnZlcnRpY2FsIHx8IGZhbHNlXG4gICAgQF9ob3Jpem9udGFsID0gb3B0aW9ucy5ob3Jpem9udGFsIHx8IGZhbHNlXG5cbiAgICBAeE1heCA9IDBcbiAgICBAeE1pbiA9IC0oQGNvbnRlbnRXaWR0aCAtIEB3aWR0aClcbiAgICBAeU1heCA9IDBcbiAgICBAeU1pbiA9IC0oQGNvbnRlbnRIZWlnaHQgLSBAaGVpZ2h0KVxuXG4gICAgQGJhY2tncm91bmRDb2xvciA9IFwidHJhbnNwYXJlbnRcIlxuICAgIEBjb250ZW50ID0gbmV3IExheWVyXG4gICAgICBzdXBlckxheWVyOiBAXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG51bGxcbiAgICAgIHdpZHRoOiBAY29udGVudFdpZHRoXG4gICAgICBoZWlnaHQ6IEBjb250ZW50SGVpZ2h0XG4gICAgQGNvbnRlbnQuZHJhZ2dhYmxlLkVuYWJsZWQgPSB0cnVlXG5cbiAgICBAY29udGVudC5vbiBFdmVudHMuRHJhZ1N0YXJ0LCBAZHJhZ1N0YXJ0XG4gICAgQGNvbnRlbnQub24gRXZlbnRzLkRyYWdNb3ZlLCBAZHJhZ01vdmVcbiAgICBAY29udGVudC5vbiBFdmVudHMuRHJhZ0VuZCwgQGRyYWdFbmRcblxuICBkcmFnU3RhcnQ6IChlLCBsYXllcikgPT5cbiAgICBAYW5pbWF0ZVN0b3AoKVxuICAgIEBtb21lbnR1bT8uc3RvcCgpXG4gICAgQGVtaXQoRXZlbnRzLkRyYWdTdGFydCwgZSwgbGF5ZXIpXG5cbiAgZHJhZ01vdmU6IChlLCBsYXllcikgPT5cbiAgICBpZiBAX2hvcml6b250YWxcbiAgICAgIGlmIGxheWVyLnggPiAwXG4gICAgICAgIEBjb250ZW50LmRyYWdnYWJsZS5zcGVlZFggPSBNYXRoLmNsYW1wKFV0aWxzLm1hcFJhbmdlKGxheWVyLngsIDEwMCwgMCwgMC41LCAxKSwgMC41LCAxKVxuICAgICAgZWxzZSBpZiBsYXllci54IDwgQHhNaW5cbiAgICAgICAgICBAY29udGVudC5kcmFnZ2FibGUuc3BlZWRYID0gTWF0aC5jbGFtcChVdGlscy5tYXBSYW5nZShsYXllci54LCBAeE1pbiAtIDEwMCwgQHhNaW4sIDAuNSwgMSksIDAuNSwgMSlcbiAgICAgIGVsc2VcbiAgICAgICAgQGNvbnRlbnQuZHJhZ2dhYmxlLnNwZWVkWCA9IDFcbiAgICBlbHNlXG4gICAgICBAY29udGVudC5kcmFnZ2FibGUuc3BlZWRYID0gMFxuXG4gICAgaWYgQF92ZXJ0aWNhbFxuICAgICAgaWYgbGF5ZXIueSA+IDBcbiAgICAgICAgQGNvbnRlbnQuZHJhZ2dhYmxlLnNwZWVkWSA9IE1hdGguY2xhbXAoVXRpbHMubWFwUmFuZ2UobGF5ZXIueSwgMTAwLCBAeU1heCwgMC41LCAxKSwgMC41LCAxKVxuICAgICAgZWxzZSBpZiBsYXllci55IDwgQHlNaW5cbiAgICAgICAgQGNvbnRlbnQuZHJhZ2dhYmxlLnNwZWVkWSA9IE1hdGguY2xhbXAoVXRpbHMubWFwUmFuZ2UobGF5ZXIueSwgQHlNaW4gLSAxMDAsIEB5TWluLCAwLjUsIDEpLCAwLjUsIDEpXG4gICAgICBlbHNlXG4gICAgICAgIEBjb250ZW50LmRyYWdnYWJsZS5zcGVlZFkgPSAxXG4gICAgZWxzZVxuICAgICAgQGNvbnRlbnQuZHJhZ2dhYmxlLnNwZWVkWSA9IDBcblxuICBkcmFnRW5kOiAoZSwgbGF5ZXIpID0+XG4gICAgY29uc29sZS5sb2cgJ3N1cGVyIGRyYWdFbmQnXG4gICAgdmVsb2NpdHkgPSBsYXllci5kcmFnZ2FibGUuY2FsY3VsYXRlVmVsb2NpdHkoKVxuICAgIGlmIE1hdGguYWJzKHZlbG9jaXR5LngpIDwgLjEgJiYgTWF0aC5hYnModmVsb2NpdHkueSkgPCAuMVxuICAgICAgeCA9IE1hdGguY2xhbXAobGF5ZXIueCwgQHhNaW4sIDApXG4gICAgICB5ID0gTWF0aC5jbGFtcChsYXllci55LCBAeU1pbiwgMClcbiAgICAgIGlmIHggIT0gbGF5ZXIueCB8fCB5ICE9IGxheWVyLnlcbiAgICAgICAgQG1vbWVudHVtID0gbGF5ZXIuYW5pbWF0ZVxuICAgICAgICAgIHByb3BlcnRpZXM6XG4gICAgICAgICAgICB4OiB4XG4gICAgICAgICAgICB5OiB5XG4gICAgICAgICAgY3VydmU6IFwic3ByaW5nXCJcbiAgICAgICAgICBjdXJ2ZU9wdGlvbnM6XG4gICAgICAgICAgICBmcmljdGlvbjogMTAwXG4gICAgICAgICAgdGltZTogLjE1XG4gICAgICAgIEBtb21lbnR1bS5vbiBFdmVudHMuQW5pbWF0aW9uRW5kLCAoKSA9PlxuICAgICAgICAgIEBlbWl0KEV2ZW50cy5EcmFnRW5kLCBlLCBsYXllcilcbiAgICAgIGVsc2VcbiAgICAgICAgQGVtaXQoRXZlbnRzLkRyYWdFbmQsIGUsIGxheWVyKVxuICAgIGVsc2VcbiAgICAgIHRvdGFsVmVsb2NpdHkgPSBVdGlscy5wb2ludFRvdGFsIFV0aWxzLnBvaW50QWJzIHZlbG9jaXR5XG4gICAgICBAbW9tZW50dW0gPSBAY29udGVudC5hbmltYXRlXG4gICAgICAgIHByb3BlcnRpZXM6XG4gICAgICAgICAgeDogTWF0aC5jbGFtcChwYXJzZUludChsYXllci54ICsgKHZlbG9jaXR5LnggKiA1MDApKSwgQHhNaW4sIDApXG4gICAgICAgICAgeTogTWF0aC5jbGFtcChwYXJzZUludChsYXllci55ICsgKHZlbG9jaXR5LnkgKiAyMDApKSwgQHlNaW4sIDApXG4gICAgICAgIGN1cnZlOiBcInNwcmluZ1wiXG4gICAgICAgIGN1cnZlT3B0aW9uczpcbiAgICAgICAgICBmcmljdGlvbjogMTAwXG4gICAgICBAbW9tZW50dW0ub24gRXZlbnRzLkFuaW1hdGlvbkVuZCwgKCkgPT5cbiAgICAgICAgQGVtaXQoRXZlbnRzLkRyYWdFbmQsIGUsIGxheWVyKVxuXG5leHBvcnRzLkNDT0RyYWdnYWJsZVNjcm9sbFZpZXdcbiIsImNsYXNzIEBDQ09TdHlsZXNoZWV0XG5cdGNvbnN0cnVjdG9yOiAodXJsKS0+XG5cdFx0d2YgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJylcblx0XHR3Zi5ocmVmID0gdXJsXG5cdFx0d2YucmVsID0gJ3N0eWxlc2hlZXQnXG5cdFx0bCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJylbMF1cblx0XHRsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdmLCBsKVxuXG5leHBvcnRzLkNDT1N0eWxlc2hlZXRcbiJdfQ==
